#+TITLE: Modern Emacs Configuration
#+AUTHOR: Ming
#+DATE: 2025
#+DESCRIPTION: A clean, modular Emacs configuration built on modern principles
#+OPTIONS: toc:2 num:nil
#+STARTUP: showeverything

* Overview

This is a modern, clean Emacs configuration that prioritizes simplicity, performance, and maintainability. It follows Emacs best practices while providing a modular structure for specialized configurations.

** Philosophy

*** Built-in First
- Prefer Emacs built-in packages over external alternatives
- Use ~use-package~ for external packages with ~:ensure t~
- Leverage modern Emacs features (tree-sitter, eglot, etc.)

*** Minimal Complexity
- Core settings live directly in ~init.el~
- Modular structure only where it provides clear benefits
- No unnecessary abstractions or complex loading systems
- Readable, self-documenting code

*** Performance Oriented
- Optimized startup with ~early-init.el~
- Lazy loading where appropriate
- Minimal package dependencies
- Efficient completion stack (vertico, corfu, marginalia)

*** Modern Development
- LSP integration via built-in ~eglot~
- Tree-sitter for syntax highlighting (Emacs 29+)
- Contemporary completion UI
- Git integration with Magit

* Configuration Structure

#+BEGIN_SRC
~/.emacs.d/
├── early-init.el       # Early initialization, package setup, UI optimizations
├── init.el            # Main configuration with core settings
├── packages.el        # Package management configuration
├── modules/           # Specialized configurations
│   ├── lang/          # Language-specific configurations
│   │   ├── cc/        # C/C++ with clangd
│   │   ├── python/    # Python with pylsp
│   │   ├── rust/      # Rust with rust-analyzer
│   │   ├── javascript/ # JS/TS with typescript-language-server
│   │   ├── go/        # Go with gopls
│   │   └── lisp/      # Lisp development
│   ├── tools/         # External tool integrations
│   │   ├── magit/     # Git integration
│   │   └── org/       # Org-mode configuration
│   ├── ui/            # User interface configurations
│   │   ├── themes/    # Themes and visual elements
│   │   └── completion/ # Completion system (vertico, corfu, etc.)
│   └── system/        # OS-specific configurations
│       ├── linux.el
│       ├── macos.el
│       └── windows.el
├── snippets/          # YASnippet templates
├── templates/         # File templates
└── themes/           # Custom themes
#+END_SRC

* Key Components

** Core Configuration (~init.el~)

The main configuration file contains:

- *Core Settings*: UTF-8, defaults, backup configuration
- *Session Management*: saveplace, recentf, savehist
- *Programming Basics*: tree-sitter, flycheck, eglot setup
- *Editing Enhancements*: multiple-cursors, avy, smartparens, yasnippet
- *Module Loading*: Simple function to load specialized modules

** Package Management (~packages.el~)

- Minimal package configuration
- ~use-package~ setup with performance optimizations
- No package declarations (handled by modules)

** Early Initialization (~early-init.el~)

- Package repository setup
- Performance optimizations (GC tuning)
- UI element disabling (menu-bar, tool-bar, etc.)
- Font configuration

** Modular System (~modules/~)

Specialized configurations are organized by category:

- *Languages*: Each language has its own module with LSP, formatting, and keybindings
- *Tools*: External tool integrations (git, org-mode, etc.)
- *UI*: Visual and interaction components
- *System*: OS-specific settings

* Adding New Configurations

** For Core Features

Add directly to ~init.el~ if the configuration is:
- Essential for basic Emacs operation
- Used across multiple modes/contexts
- Simple and doesn't require extensive setup

#+BEGIN_SRC emacs-lisp
;; Example: Adding a global setting
(setq-default cursor-type 'bar)

;; Example: Adding a simple package
(use-package which-key
  :ensure t
  :config
  (which-key-mode 1))
#+END_SRC

** For Specialized Features

Create a new module under ~modules/~ if the configuration:
- Is specific to a language, tool, or domain
- Requires extensive setup or many packages
- Benefits from being isolated from core config

*** Adding a New Language

1. Create directory: ~modules/lang/mylang/~
2. Create ~config.el~ with language-specific setup
3. Add module loading to ~init.el~:

#+BEGIN_SRC emacs-lisp
;; In init.el, add to language modules section
(load-config-module "lang" "mylang")
#+END_SRC

*** Adding a New Tool

1. Create directory: ~modules/tools/mytool/~
2. Create ~config.el~ with tool configuration
3. Add module loading to ~init.el~:

#+BEGIN_SRC emacs-lisp
;; In init.el, add to tool modules section  
(load-config-module "tools" "mytool")
#+END_SRC

** Module Template

Each module should follow this structure:

#+BEGIN_SRC emacs-lisp
;;; modules/category/name/config.el -*- lexical-binding: t; -*-

;; Brief description of what this module provides

;; Package configuration
(use-package my-package
  :ensure t
  :mode "\\.ext\\'"
  :hook (my-mode . my-setup-function)
  :bind (:map my-mode-map
              ("C-c C-c" . my-command))
  :config
  (setq my-setting value))

;; Helper functions
(defun my-setup-function ()
  "Setup function for my-mode."
  ;; Mode-specific setup
  )

;; Additional configuration...
#+END_SRC

* Best Practices

** Code Organization

- *Logical Grouping*: Group related settings together
- *Clear Comments*: Use section headers and explain complex configurations  
- *Consistent Style*: Follow existing patterns and naming conventions
- *Documentation*: Include docstrings for custom functions

** Performance Considerations

- *Lazy Loading*: Use ~:hook~, ~:defer~, and ~:after~ in ~use-package~
- *Minimal Dependencies*: Prefer built-in packages and avoid heavy packages
- *Startup Optimization*: Keep ~init.el~ focused on essential configurations
- *Garbage Collection*: Early init handles GC tuning

** Package Management

- *Always use ~:ensure t~* for external packages
- *Prefer built-in packages* when available
- *Pin package versions* for stability if needed
- *Document package purposes* with comments

** Keybinding Conventions

- *~C-c <letter>~*: Global commands (C-c g for git, C-c p for project)
- *~C-c C-<letter>~*: Mode-specific commands
- *~C-c l~*: LSP commands prefix
- *Follow Emacs conventions* and avoid conflicting with built-in bindings

* Language Support

Each language module provides:

- *LSP Integration*: Using built-in ~eglot~
- *Syntax Highlighting*: Tree-sitter when available
- *Code Formatting*: Language-specific formatters
- *Build/Run Commands*: Convenient compilation and execution
- *Project Management*: Integration with project.el

** Supported Languages

- *C/C++*: clangd LSP, clang-format, CMake/Makefile support
- *Python*: pylsp, black/autopep8 formatting, pytest integration
- *Rust*: rust-analyzer, rustfmt, cargo integration
- *JavaScript/TypeScript*: typescript-language-server, prettier, npm scripts
- *Go*: gopls, gofmt/goimports, go toolchain integration
- *Lisp*: Built-in completion and editing support

** Adding Language Support

To add a new language:

1. Install the language server (see CLAUDE.md for details)
2. Create the module configuration
3. Follow the existing language module patterns
4. Test LSP functionality and formatting
5. Add language-specific keybindings

* Required Dependencies

** Language Servers

Install these for full language support:

#+BEGIN_SRC bash
# C/C++
sudo apt install clangd  # or brew install llvm

# Python  
pip install python-lsp-server[all] ruff black isort

# Rust
rustup component add rust-analyzer rustfmt clippy

# JavaScript/TypeScript
npm install -g typescript-language-server typescript prettier

# Go
go install golang.org/x/tools/gopls@latest
go install golang.org/x/tools/cmd/goimports@latest
#+END_SRC

** Optional Tools

- *Fonts*: JetBrains Mono Nerd Font (configured in early-init.el)
- *Git*: For Magit functionality
- *Ripgrep*: For fast searching (if using consult)
- *Node.js*: For JavaScript development and some formatters

* Customization

** Themes

The configuration includes Doom themes. To change:

1. Edit ~modules/ui/themes/config.el~
2. Replace ~doom-one~ with your preferred theme
3. Or uncomment alternative theme configurations

** Fonts

Font configuration is in ~early-init.el~:

#+BEGIN_SRC emacs-lisp
;; Adjust font family and size
(when (member "JetBrains Mono" (font-family-list))
  (set-face-attribute 'default nil :font "JetBrains Mono-12"))
#+END_SRC

** Keybindings

- *Global keybindings*: Add to ~init.el~
- *Mode-specific*: Add to respective language/tool modules
- *Follow conventions*: Use ~C-c~ prefix for custom bindings

* Troubleshooting

** Common Issues

- *LSP not starting*: Check if language server is installed and in PATH
- *Packages not installing*: Check network connection and package archives
- *Slow startup*: Review package configurations for performance issues
- *Keybinding conflicts*: Use ~C-h k~ to check existing bindings

** Debugging

- *Check ~*Messages*~ buffer* for error messages
- *Use ~emacs --debug-init~* for startup issues
- *Profile startup* with ~esup~ package if needed
- *Check LSP status* with ~M-x eglot-events-buffer~

** Getting Help

- *Built-in help*: ~C-h~ prefix commands
- *Package documentation*: ~C-h P <package-name>~
- *Function help*: ~C-h f <function-name>~
- *Variable help*: ~C-h v <variable-name>~

* Contributing

When modifying this configuration:

1. *Test thoroughly* before committing changes
2. *Document new features* and configuration options
3. *Follow existing patterns* and conventions
4. *Update this README* for significant changes
5. *Consider performance impact* of new packages/configurations

** Directory and Naming Conventions

*** Module Organization

The ~modules/~ directory follows a strict hierarchical structure:

#+BEGIN_SRC
modules/
├── <category>/     # Top-level category (lang, tools, ui, system)
│   └── <name>/     # Specific module name
│       └── config.el  # Main configuration file
#+END_SRC

**** Categories

- *~lang/~*: Programming language support
  - Directory names match language names: ~python~, ~rust~, ~javascript~, ~cc~ (for C/C++)
  - Each contains LSP setup, formatting, and language-specific tooling
  
- *~tools/~*: External tool integrations
  - Directory names match tool names: ~magit~, ~org~, ~docker~
  - Each contains tool-specific configuration and keybindings
  
- *~ui/~*: User interface and interaction components
  - Directory names describe UI aspects: ~themes~, ~completion~, ~modeline~
  - Each contains related visual and interaction settings
  
- *~system/~*: Operating system specific configurations
  - Files named by OS: ~linux.el~, ~macos.el~, ~windows.el~
  - Contains platform-specific settings and optimizations

**** File Naming Rules

- *Main config*: Always ~config.el~ within module directory
- *Module directories*: Use lowercase, hyphen-separated names
- *Categories*: Single word, plural form where applicable
- *Language modules*: Use common short names (~cc~ not ~cplusplus~, ~js~ not ~javascript~)

*** Code File Conventions

**** File Headers

All configuration files must include:

#+BEGIN_SRC emacs-lisp
;;; modules/<category>/<name>/config.el -*- lexical-binding: t; -*-
;;; Commentary:
;; Brief description of module purpose
;;; Code:

;; Configuration content here

;;; modules/<category>/<name>/config.el ends here
#+END_SRC

**** Function Naming

- *Module functions*: Prefix with module name: ~python-setup-lsp~, ~magit-configure-keybindings~
- *Helper functions*: Use descriptive names with ~--~ for internal functions
- *Hook functions*: Suffix with ~-hook~ or ~-setup~

**** Variable Naming

- *Module variables*: Prefix with module category/name
- *File paths*: Use ~-file~, ~-directory~, or ~-path~ suffixes
- *Toggles*: Use ~-enabled-p~ or ~-mode~ suffixes

*** Loading Convention

Modules are loaded via the ~load-config-module~ function in ~init.el~:

#+BEGIN_SRC emacs-lisp
;; Function definition (already in init.el)
(defun load-config-module (category module)
  "Load a configuration module."
  (let ((config-file (expand-file-name
                      (format "modules/%s/%s/config.el" category module)
                      user-emacs-directory)))
    (when (file-exists-p config-file)
      (load config-file))))

;; Usage pattern
(load-config-module "lang" "python")     ; loads modules/lang/python/config.el
(load-config-module "tools" "magit")     ; loads modules/tools/magit/config.el
(load-config-module "ui" "completion")   ; loads modules/ui/completion/config.el
#+END_SRC

*** Module Development Guidelines

**** Creating a New Language Module

1. Create directory: ~modules/lang/<language>/~
2. Create ~config.el~ with standard header
3. Include these sections (if applicable):
   - LSP server configuration
   - Tree-sitter setup
   - Formatting tool configuration
   - Build/run commands
   - Language-specific keybindings
4. Add loading call to ~init.el~
5. Test thoroughly with sample projects

**** Creating a New Tool Module

1. Create directory: ~modules/tools/<tool>/~
2. Create ~config.el~ with tool integration
3. Include these sections:
   - Package declaration with ~use-package~
   - Tool-specific configuration
   - Keybinding setup (following ~C-c <letter>~ convention)
   - Integration with existing workflow
4. Add loading call to ~init.el~
5. Document any external dependencies

**** Modifying Existing Modules

- *Test changes* in isolation before committing
- *Maintain backward compatibility* when possible
- *Update documentation* if behavior changes
- *Follow existing patterns* within the module
- *Consider performance implications* of changes

** Code Style

- Use ~lexical-binding: t~ in all files
- Include proper file headers with description
- Group related configurations together
- Comment complex or non-obvious configurations
- Use consistent indentation (2 spaces for Lisp)
- Prefer ~use-package~ for external packages with ~:ensure t~
- Use ~setq-default~ for global defaults, ~setq~ for local settings
- Keep line length under 80 characters where practical

** Git Workflow

- *Commit atomically*: One logical change per commit
- *Test before pushing*: Ensure Emacs starts without errors
- *Update README*: For user-visible changes
- *Document dependencies*: Note any new external requirements

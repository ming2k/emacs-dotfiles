#+title: Org-Mode Configuration
#+author: Your Name
#+date: 2025-01-11

* Overview

This is a comprehensive org-mode configuration optimized for productivity and minimal distractions. The configuration follows a "completion-disabled" philosophy in org-mode to prevent interference with org workflows while maintaining full functionality.

* Architecture

The org configuration is structured into three main files:

** =config.el= - Main Loader
- Loads =org.el= and =org-roam.el=
- Entry point for the org module system

** =org.el= - Core Org-Mode Configuration
- Basic org-mode settings and workflow
- Visual enhancements and appearance
- Babel (code execution) configuration
- Completion management system

** =org-roam.el= - Zettelkasten Note-Taking System  
- Org-roam configuration for knowledge management
- Aggressive completion disabling for distraction-free writing
- Node-based linking and graph functionality

* Features

** Core Org-Mode Features

*** Directory Structure
- =~/org/= - Main org directory
- =~/org/roam/= - Org-roam notes directory
- Automatic directory creation

*** Workflow Management
- Custom TODO keywords: =TODO(t)= → =DOING(g)= → =DONE(d!)= / =CANCELLED(c!)=
- Automatic timestamp logging for completed tasks
- Efficient agenda views with done task filtering

*** Capture Templates
- =C-c c t= - Quick task capture
- =C-c c j= - Journal entry with date tree

*** Visual Enhancements
- Custom bullet points: • ◦ ▪
- Hidden leading stars for clean appearance
- Odd-level-only outline structure
- Pretty entities rendering

*** Code Execution (Babel)
- Enabled languages: Emacs Lisp, Shell, Python
- Syntax highlighting in source blocks
- No confirmation prompts for code execution
- Native tab behavior in source blocks

** Completion Management Philosophy

*** Why Completion is Disabled
The configuration *aggressively disables* automatic completion in org-mode because:
- Prevents distractions during writing and note-taking
- Avoids unwanted suggestions when typing prose
- Eliminates conflicts between completion systems and org syntax
- Maintains focus on content creation over code completion

*** Manual Path Completion
While automatic completion is disabled, you can still access file path completion when needed:
- =C-c TAB= or =C-c C-/= - Manual file path completion
- Temporarily enables Corfu for path completion only
- Automatically disables after completion

** Org-Roam Features

*** Zettelkasten Workflow
- Node-based note-taking system
- Automatic backlink detection
- Graph-based knowledge exploration
- Database auto-sync for fast searches

*** Key Bindings
- =C-c n f= - Find or create a node
- =C-c n i= - Insert link to existing/new node  
- =C-c n c= - Capture new node with template

*** Aggressive Completion Disabling
Org-roam includes even more aggressive completion disabling to ensure:
- No file name completions in roam buffers
- No automatic suggestions during writing
- Complete isolation from completion systems
- Clean writing environment

* Key Bindings Reference

** Global Org Bindings
| Key       | Command              | Description                    |
|-----------+----------------------+--------------------------------|
| =C-c a=   | org-agenda           | Open agenda view               |
| =C-c c=   | org-capture          | Quick capture menu             |
| =C-c l=   | org-store-link       | Store link to current location |

** Org-Mode Buffer Bindings  
| Key         | Command                    | Description                  |
|-------------+----------------------------+------------------------------|
| =C-c TAB=   | org-manual-path-completion | Manual file path completion  |
| =C-c C-/=   | org-manual-path-completion | Alternative manual completion|

** Org-Roam Bindings
| Key       | Command              | Description              |
|-----------+----------------------+--------------------------|
| =C-c n f= | org-roam-node-find   | Find/create node         |
| =C-c n i= | org-roam-node-insert | Insert node link         |
| =C-c n c= | org-roam-capture     | Capture new node         |

* Configuration Customization

** Adding New Babel Languages
To enable additional programming languages in org-babel, edit =org.el=:

#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (python . t)
   (js . t)        ; Add JavaScript
   (sql . t)       ; Add SQL
   (C . t)))       ; Add C/C++
#+end_src

** Customizing Capture Templates
Modify the capture templates in =org.el=:

#+begin_src elisp
(org-capture-templates
 '(("t" "Task" entry (file+headline org-default-notes-file "Tasks")
    "* TODO %?\n  %U")
   ("m" "Meeting" entry (file+headline org-default-notes-file "Meetings")
    "* Meeting: %?\n  %U\n  ** Attendees\n  ** Notes")
   ("j" "Journal" entry (file+datetree org-default-notes-file)
    "* %?\n  %U")))
#+end_src

** Org-Roam Templates
Uncomment and customize org-roam capture templates in =org-roam.el= for different note types:

#+begin_src elisp
(org-roam-capture-templates
 '(("d" "default" plain "%?"
    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                       "#+title: ${title}\n")
    :unnarrowed t)
   ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks"
    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                       "#+title: ${title}\n#+filetags: Project\n")
    :unnarrowed t)))
#+end_src

* Workflow Tips

** Daily Workflow
1. =C-c c t= - Capture tasks as they come up
2. =C-c a= - Review agenda daily
3. =C-c n f= - Find or create roam notes for knowledge work
4. Use =C-c TAB= only when you need file path completion

** Note-Taking Best Practices
- Use org-roam for interconnected knowledge notes
- Use regular org files for project management and tasks
- Leverage the disabled completion for distraction-free writing
- Create atomic notes that can be linked and reused

** Maintenance
- Org-roam database syncs automatically
- Archive completed tasks to =archive/= subdirectory
- Review and refactor capture templates periodically
- Keep roam notes focused and well-linked

* Troubleshooting

** If Completion Appears Unexpectedly
The configuration should prevent all automatic completion, but if it appears:
1. Check if you're in a non-org buffer
2. Restart Emacs to reset advice functions
3. Verify the completion advice functions are loaded

** Performance Issues
- Org-roam database rebuilds automatically but can be manually triggered
- Large org files may benefit from =#+STARTUP: folded=
- Consider splitting very large files into smaller ones

** Integration Issues  
- LSP and programming modes work normally outside org-mode
- Completion works fully in all other major modes
- The configuration only affects =org-mode= and =org-roam= buffers

* Dependencies

** Required Packages
- =org= (built-in to Emacs)
- =org-roam= (installed via package manager)

** Optional Enhancements
- Consider =org-modern= for additional visual improvements
- =org-superstar= for enhanced bullet styling
- =org-download= for image handling in notes

* File Structure Summary

#+begin_example
modules/tools/org/
├── config.el     # Main loader (loads other files)
├── org.el        # Core org-mode configuration
├── org-roam.el   # Zettelkasten note-taking system
└── README.org    # This documentation
#+end_example

This modular approach keeps related functionality together while maintaining clear separation between core org features and the specialized org-roam system.